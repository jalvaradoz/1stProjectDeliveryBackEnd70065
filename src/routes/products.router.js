import { Router } from "express"
import fs from "fs/promises"

const productsRouter = Router()

const getProducts = async () => {
    try {
        const data = await fs.readFile("./src/products.json", "utf-8")
        return JSON.parse(data)
    } catch (err) {
        console.error(err)
        throw new Error('Internal Server Error')
    }
}

productsRouter.get('/products', async (req, res) => {
    try {
        const products = await getProducts()
        const limit = req.query.limit
        limit ? res.json(products.slice(0, limit)) : res.json(products)
    } catch (error) {
        console.error(error)
        res.status(500).json({ error: 'Internal Server Error' })
    }
})

productsRouter.get('/products/:pid', async (req, res) => {
    try {
        const products = await getProducts()
        const idProduct = req.params.pid
        const productById = products.find(p => p.id === idProduct)

        !productById ? res.status(404).json({ error: `Cant find product under the ID: ${idProduct}` }) : res.send({ productById })
    } catch (error) {
        console.error(error)
        res.status(500).json({ error: 'Internal Server Error' })
    }
})

productsRouter.post('/products', async (req, res) => {
    try {
        const { id, title, description, code, price, stock, category, thumbnails } = req.body

        if (id) {
            return res.status(400).json({ error: 'You can`t generate the ID, it will be autogenerated upon existing inventory' })
        }
        // This Validates that every field is present before submitting, also if the stock is 0 or less it does not allow to enter a new product
        if (stock <= 0) {
            return res.status(400).json({ error: 'Stock must be greater than 0' })
        } else if (!title || !description || !code || !price || !stock || !category) {
            return res.status(400).json({ error: 'All fields are required but thumbnails' })
        }

        let products = await getProducts()

        if (products.some(p => p.title === title)) {
            return res.status(400).json({ error: 'A product with this TITLE already exists, check inventory first' })
        }

        const newId = products.length + 1

        const newProduct = {
            id: String(newId),
            title,
            description,
            code,
            price: Number(price),
            status: true,
            stock: Number(stock),
            category,
            thumbnails: thumbnails || []
        }

        products.push(newProduct)

        await fs.writeFile('./src/products.json', JSON.stringify(products, null, 2))

        res.status(201).json({ message: 'product saved!', product: newProduct })

    } catch (error) {
        console.error(error)
        res.status(500).json({ error: 'Internal Server Error' })
    }
})

// update specific product by ID
productsRouter.put('/products/:pid', async (req, res) => {
    try {
        let products = await getProducts()
        const idProduct = req.params.pid
        const findProductById = products.find(p => p.id === idProduct)

        if (req.body.id && req.body.id !== idProduct) {
            return res.status(400).json({ error: 'You can`t update the ID' });
        }

        const newValues = req.body

        if (findProductById) {
            const productUpdated = {
                ...findProductById,

                title: newValues.title || findProductById.title,
                description: newValues.description || findProductById.description,
                code: newValues.code || findProductById.code,
                price: newValues.price || findProductById.price,
                stock: newValues.stock || findProductById.stock,
                category: newValues.category || findProductById.category,
                thumbnails: newValues.thumbnails || findProductById.thumbnails || []
            }

            products = products.map(product => product.id === idProduct ? productUpdated : product)

            await fs.writeFile('./src/products.json', JSON.stringify(products, null, 2))

            res.status(201).json({ message: 'product updated!', oldInfo: findProductById, newInfo: productUpdated })
        } else {
            return res.status(404).json({ error: 'product not found' })
        }
    } catch (error) {
        console.error(error)
        res.status(500).json({ error: 'Internal Server Error' })
    }
})

productsRouter.delete('/products/:pid', async (req, res) => {
    try {
        let products = await getProducts()
        const idProduct = req.params.pid
        const productIndex = products.findIndex(p => p.id === idProduct)

        if (productIndex === -1) {
            return res.status(404).json({ error: 'Product not found' })
        }

        products = products.filter(p => p.id !== idProduct)

        await fs.writeFile('./src/products.json', JSON.stringify(products, null, 2))

        res.status(200).json({ message: 'Product deleted!' })

    } catch (error) {
        console.error(error)
        res.status(500).json({ error: 'Internal Server Error' })
    }


})

export default productsRouter
